{
  "title": "Test Double",
  "story": [
    {
      "type": "markdown",
      "id": "139a39ae204743e3",
      "text": "A Test Double is a non-production code dependency that sufficiently mimics product behaviour to support testing.\n"
    },
    {
      "type": "markdown",
      "id": "15eec6c85c75fb45",
      "text": "[[Gerard Meszaros]] identifies 5 types of Test Double:\n* [[Test Stub]]\n* [[Mock Object]]\n* [[Test Spy]]\n* [[Fake Object]]\n* [[Dummy Object]]"
    },
    {
      "type": "pagefold",
      "id": "3f6df68939dbb89a",
      "text": "References"
    },
    {
      "type": "markdown",
      "id": "9664e453ec0d9430",
      "text": ">Frequently, the final release software consists of a complex set of objects or procedures interacting together to create the final result. In automated unit testing, it may be necessary to use objects or procedures that look and behave like their release-intended counterparts, but are actually simplified versions that reduce the complexity and facilitate testing. A test double is a generic (meta) term used for these objects or procedures.\n[https://en.wikipedia.org/wiki/Test_double  wikipedia]"
    },
    {
      "type": "markdown",
      "id": "3075945fc469356e",
      "text": "[[Vladimir Khorikov]] simplifies to key two types:\n>they can all be grouped together into just two types: mocks and stubs\n>* Mocks help to emulate and examine **outgoing** interactions. These interactions are calls the system under test (SUT) makes to its dependencies to change their state.\n>* Stubs help to emulate **incoming** interactions. These interactions are calls the SUT makes to its dependencies to get input data.\n[https://enterprisecraftsmanship.com/posts/when-to-mock/ page]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Test Double",
        "story": []
      },
      "date": 1589467302935
    },
    {
      "item": {
        "type": "factory",
        "id": "7c5780d51e11c6b1"
      },
      "id": "7c5780d51e11c6b1",
      "type": "add",
      "date": 1589467304498
    },
    {
      "type": "remove",
      "id": "7c5780d51e11c6b1",
      "date": 1589467309348
    },
    {
      "item": {
        "type": "factory",
        "id": "139a39ae204743e3"
      },
      "id": "139a39ae204743e3",
      "type": "add",
      "date": 1589467319882
    },
    {
      "type": "edit",
      "id": "139a39ae204743e3",
      "item": {
        "type": "markdown",
        "id": "139a39ae204743e3",
        "text": "A Test Double is a non-production code dependency that sufficiently mimics product behaviour to support testing.\n"
      },
      "date": 1589467365629
    },
    {
      "item": {
        "type": "factory",
        "id": "15eec6c85c75fb45"
      },
      "id": "15eec6c85c75fb45",
      "type": "add",
      "after": "139a39ae204743e3",
      "date": 1589467398417
    },
    {
      "type": "edit",
      "id": "15eec6c85c75fb45",
      "item": {
        "type": "markdown",
        "id": "15eec6c85c75fb45",
        "text": "[[Gerard Meszaros]] identifies 5 types of Test Double:\n* Stub\n* Mock\n* Spy\n* Fake\n* Dummy"
      },
      "date": 1589467438769
    },
    {
      "item": {
        "type": "factory",
        "id": "3f6df68939dbb89a"
      },
      "id": "3f6df68939dbb89a",
      "type": "add",
      "after": "15eec6c85c75fb45",
      "date": 1589467494738
    },
    {
      "type": "edit",
      "id": "3f6df68939dbb89a",
      "item": {
        "type": "pagefold",
        "id": "3f6df68939dbb89a",
        "text": "References"
      },
      "date": 1589467505138
    },
    {
      "item": {
        "type": "factory",
        "id": "02375510ce9f391b"
      },
      "id": "02375510ce9f391b",
      "type": "add",
      "after": "3f6df68939dbb89a",
      "date": 1589467507076
    },
    {
      "type": "remove",
      "id": "02375510ce9f391b",
      "date": 1589467519419
    },
    {
      "item": {
        "type": "factory",
        "id": "9664e453ec0d9430"
      },
      "id": "9664e453ec0d9430",
      "type": "add",
      "after": "3f6df68939dbb89a",
      "date": 1589467548479
    },
    {
      "type": "edit",
      "id": "9664e453ec0d9430",
      "item": {
        "type": "markdown",
        "id": "9664e453ec0d9430",
        "text": ">Frequently, the final release software consists of a complex set of objects or procedures interacting together to create the final result. In automated unit testing, it may be necessary to use objects or procedures that look and behave like their release-intended counterparts, but are actually simplified versions that reduce the complexity and facilitate testing. A test double is a generic (meta) term used for these objects or procedures.\n[  wikipedia]"
      },
      "date": 1589467562103
    },
    {
      "type": "edit",
      "id": "9664e453ec0d9430",
      "item": {
        "type": "markdown",
        "id": "9664e453ec0d9430",
        "text": ">Frequently, the final release software consists of a complex set of objects or procedures interacting together to create the final result. In automated unit testing, it may be necessary to use objects or procedures that look and behave like their release-intended counterparts, but are actually simplified versions that reduce the complexity and facilitate testing. A test double is a generic (meta) term used for these objects or procedures.\n[https://en.wikipedia.org/wiki/Test_double  wikipedia]"
      },
      "date": 1589467569560
    },
    {
      "type": "edit",
      "id": "15eec6c85c75fb45",
      "item": {
        "type": "markdown",
        "id": "15eec6c85c75fb45",
        "text": "[[Gerard Meszaros]] identifies 5 types of Test Double:\n* [[Test Stub]]\n* [[Mock Object]]\n* [[Test Spy]]\n* [[Fake\n* Dummy"
      },
      "date": 1589467842648
    },
    {
      "type": "edit",
      "id": "15eec6c85c75fb45",
      "item": {
        "type": "markdown",
        "id": "15eec6c85c75fb45",
        "text": "[[Gerard Meszaros]] identifies 5 types of Test Double:\n* [[Test Stub]]\n* [[Mock Object]]\n* [[Test Spy]]\n* [[Fake Object]]\n* [[Dummy Object]]"
      },
      "date": 1589467882421
    },
    {
      "item": {
        "type": "factory",
        "id": "3075945fc469356e"
      },
      "id": "3075945fc469356e",
      "type": "add",
      "after": "9664e453ec0d9430",
      "date": 1589468219581
    },
    {
      "type": "edit",
      "id": "3075945fc469356e",
      "item": {
        "type": "markdown",
        "id": "3075945fc469356e",
        "text": "[[Vladimir Khorikov]] simplifies to key two types:\n"
      },
      "date": 1589468237590
    },
    {
      "type": "edit",
      "id": "3075945fc469356e",
      "item": {
        "type": "markdown",
        "id": "3075945fc469356e",
        "text": "[[Vladimir Khorikov]] simplifies to key two types:\n>they can all be grouped together into just two types: mocks and stubs\n>\n"
      },
      "date": 1589468304399
    },
    {
      "type": "edit",
      "id": "3075945fc469356e",
      "item": {
        "type": "markdown",
        "id": "3075945fc469356e",
        "text": "[[Vladimir Khorikov]] simplifies to key two types:\n>they can all be grouped together into just two types: mocks and stubs\n>* Mocks help to emulate and examine outcoming interactions. These interactions are calls the system under test (SUT) makes to its dependencies to change their state.\n>* Stubs help to emulate incoming interactions. These interactions are calls the SUT makes to its dependencies to get input data.\n"
      },
      "date": 1589468330065
    },
    {
      "type": "edit",
      "id": "3075945fc469356e",
      "item": {
        "type": "markdown",
        "id": "3075945fc469356e",
        "text": "[[Vladimir Khorikov]] simplifies to key two types:\n>they can all be grouped together into just two types: mocks and stubs\n>* Mocks help to emulate and examine **outgoing** interactions. These interactions are calls the system under test (SUT) makes to its dependencies to change their state.\n>* Stubs help to emulate **incoming** interactions. These interactions are calls the SUT makes to its dependencies to get input data.\n"
      },
      "date": 1589468350232
    },
    {
      "type": "edit",
      "id": "3075945fc469356e",
      "item": {
        "type": "markdown",
        "id": "3075945fc469356e",
        "text": "[[Vladimir Khorikov]] simplifies to key two types:\n>they can all be grouped together into just two types: mocks and stubs\n>* Mocks help to emulate and examine **outgoing** interactions. These interactions are calls the system under test (SUT) makes to its dependencies to change their state.\n>* Stubs help to emulate **incoming** interactions. These interactions are calls the SUT makes to its dependencies to get input data.\n[https://enterprisecraftsmanship.com/posts/when-to-mock/ page]\n"
      },
      "date": 1589468367084
    }
  ]
}